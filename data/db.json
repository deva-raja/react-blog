{
  "blogs": [
    {
      "title": "Opening Party!",
      "body": "Why do we use it?\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\nWhere does it come from?\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n\nWhere can I get some?\nThere are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
      "author": "yoshi",
      "id": 2
    },
    {
      "title": "The Ultimate React Guide",
      "body": "Why do we use it?\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\nWhere does it come from?\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n\nWhere can I get some?\nThere are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
      "author": "kent c dotts",
      "id": 4
    },
    {
      "title": "Css Battle - the controversies",
      "body": "Why do we use it?\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\nWhere does it come from?\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n\nWhere can I get some?\nThere are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
      "author": "dev ed",
      "id": 6
    },
    {
      "title": "practical react ",
      "body": "Photo by Jonny Gios\n\nThere are plenty of ways to do it, here's how I recommend typing React Components\n\nHere's our component without types:\n\nconst operations = {\n\n  '+': (left, right) => left + right,\n\n  '-': (left, right) => left - right,\n\n  '*': (left, right) => left * right,\n\n  '/': (left, right) => left / right,\n\n}\n\nfunction Calculator({left, operator, right}) {\n\n  const result = operations[operator](left, right)\n\n  return (\n\n    <div>\n\n      <code>\n\n        {left} {operator} {right} = <output>{result}</output>\n\n      </code>\n\n    </div>\n\n  )\n\n}\n\nconst examples = (\n\n  <>\n\n    <Calculator left={1} operator=\"+\" right={2} />\n\n    <Calculator left={1} operator=\"-\" right={2} />\n\n    <Calculator left={1} operator=\"*\" right={2} />\n\n    <Calculator left={1} operator=\"/\" right={2} />\n\n  </>\n\n)\n\nRight there you may notice we do things a little differently. Maybe you prefer this instead:\n\nconst Calculator = ({left, operator, right}) => (\n\n  <div>\n\n    <code>\n\n      {left} {operator} {right} ={' '}\n\n      <output>{operations[operator](left, right)}</output>\n\n    </code>\n\n  </div>\n\n)\n\nI don't like the implicit return there. It means you can't reasonably declare variables or use hooks. So even for simple components, I never go with this approach.\n\nOk, so maybe you do this:\n\nconst Calculator = ({left, operator, right}) => {\n\n  const result = operations[operator](left, right)\n\n  return (\n\n    <div>\n\n      <code>\n\n        {left} {operator} {right} = <output>{result}</output>\n\n      </code>\n\n    </div>\n\n  )\n\n}\n\nHonestly, that's fine most of the time. I personally like the hoisting characteristics of function declarations rather than function expressions like that (learn more).\n\nAlright, let's add some types to this. For functions, you need to consider the types coming in and the types going out. Let's start with the input: props. To start, let's go with a simple type for the props (we'll improve it later):\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: string\n\n  right: number\n\n}\n\nWith that, let's try some options for applying that type to the props object in our React Component.\n\nA common method to typing a React component is to use one of the generics that are built-into @types/react (I mean, it's built-in right? So what could go wrong?). Interestingly, you cannot type a function declaration this way, so we'll have to use a function expression:\n\nconst Calculator: React.FC<CalculatorProps> = ({left, right, operator}) => {\n\n  // implementation clipped for brevity\n\n}\n\nThis works pretty well, but there are three major problems with this:\n\n    Our Calculator function now accepts a children prop, even though we don't do anything with it 🙃 (So, this compiles: <Calculator left={1} operator=\"+\" right={2}>What?</Calculator>).\n    You can't use generics. Not super common, but definitely a downside.\n    We have to use a function expression and can't use a function declarations.\n\nOk ok, so maybe #3 isn't a major problem, but #1 is pretty significant. There are a few other smaller issues laid out in this excellent GitHub issue if you want to dive deeper (also check the React TypeScript Cheatsheet). Suffice it to say, don't use React.FC (or its longer alias React.FunctionComponent).\n\nOne of the things I love about React components is that they aren't all that special. Here's the definition of a React component:\n\n    A React component is a function that returns something React can render.\n\nNow, according to @types/react, we're limited to null and JSX.Elements, but React can actually render strings, numbers, and booleans as well. In any case, because a React component is simply a function that returns something React can render, typing it can be just as straightforward as typing functions. You don't have to do anything special just because it's React.\n\nSo here's how I'd type the props for this component:\n\nfunction Calculator({left, operator, right}: CalculatorProps) {\n\n  // implementation clipped for brevity\n\n}\n\nThis doesn't have any of the shortcomings of React.FC and it's no more complicated than typing the arguments to a regular function.\n\nOk, so what about the return value? Well, we could type it as React.ReactElement or even wider as a JSX.Element. But honestly, I side with my friend Nick McCurdy when he says that mistakes can easily be made causing the return type to be too wide. So even outside a react context, I default to not specifying the return type (rely on inference) unless necessary. And that's the case here.\nImproving the CalculatorProps type\n\nOk, now this next bit has nothing to do with typing React components, but I thought you'd find it interesting anyway, so skip ahead if you don't. Let's improve the CalculatorProps type. As a reminder, here's what we have so far:\n\n// I took the liberty of typing each of these functions as well:\n\nconst operations = {\n\n  '+': (left: number, right: number): number => left + right,\n\n  '-': (left: number, right: number): number => left - right,\n\n  '*': (left: number, right: number): number => left * right,\n\n  '/': (left: number, right: number): number => left / right,\n\n}\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: string\n\n  right: number\n\n}\n\nfunction Calculator({left, operator, right}: CalculatorProps) {\n\n  const result = operations[operator](left, right)\n\n  return (\n\n    <div>\n\n      <code>\n\n        {left} {operator} {right} = <output>{result}</output>\n\n      </code>\n\n    </div>\n\n  )\n\n}\n\nI think the left and right types are fine. It's the operator that I'm unhappy with. Using string is too wide. There are specific operations that are allowed. For example, what would happen if we tried:\n\nconst element = <Calculator left={1} operator=\"wut\" right={2} />\n\nThat right there is what we call a runtime exception my friends. That is... unless you have strict mode on, in which case you'd have a compilation error on operations[operator]. In strict mode, TypeScript will correctly know that accessing any string from the operations object will not necessarily return a callable function.\n\nThere are plenty of ways to solve this problem. Basically, we want to limit the operator to only the supported operators. We can do that with a simple union type:\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: '+' | '-' | '*' | '/'\n\n  right: number\n\n}\n\nBut if we decided to add the Exponentiation Operator (**), then we'd have to update not only the operators object, but also the operator type which would be annoying. Maybe there's a way we can derive the type for the operator based on the operators object? Why, yes there is!\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: keyof typeof operations\n\n  right: number\n\n}\n\ntypeof operations is going to get us a type that describes the operations object, which is roughly equal to:\n\ntype OperationsObj = {\n\n  '+': (left: number, right: number) => number\n\n  '-': (left: number, right: number) => number\n\n  '*': (left: number, right: number) => number\n\n  '/': (left: number, right: number) => number\n\n}\n\nThe keyof part will take all the keys of that type, resulting in '+' | '-' | '*' | '/' 🎉\n\nBut I'm not done... I'm not a fan of having to type each of the operations objects. They're identically typed (by necessity due to the use case). The operations object is really just a record of operation strings mapped to a function that operates on two numbers. If we were to extract the type for those functions into a single type, it would be:\n\ntype OperationFn = (left: number, right: number) => number\n\nSo if we add a type annotation on our operations variable, then we don't have to type each function individually. Let's try that:\n\ntype OperationFn = (left: number, right: number) => number\n\nconst operations: Record<string, OperationFn> = {\n\n  '+': (left, right) => left + right,\n\n  '-': (left, right) => left - right,\n\n  '*': (left, right) => left * right,\n\n  '/': (left, right) => left / right,\n\n}\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: keyof typeof operations\n\n  right: number\n\n}\n\nSweet, so we don't have to type every function individually, but oh no... now the typeof operations is Record<string, OperationFn> and the keyof of that is going to be string which means our CalculatorProps['operator'] type will be string. Ugh 😩\n\nHere's what we could do to fix this:\n\ntype OperationFn = (left: number, right: number) => number\n\ntype Operator = '+' | '-' | '/' | '*'\n\nconst operations: Record<Operator, OperationFn> = {\n\n  '+': (left, right) => left + right,\n\n  '-': (left, right) => left - right,\n\n  '*': (left, right) => left * right,\n\n  '/': (left, right) => left / right,\n\n}\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: keyof typeof operations\n\n  right: number\n\n}\n\nBut now we're back to having to add ** in two places if we decide to add the Exponentiation operator. However, in this case, TypeScript will give us a compiler error if we add it in one and not the other, so that's a step up.\n\nAt this point, we just need to decide which we dislike the least: If we type every function individually, we deal with repetition in every function. If we add a type annotation to the object, we have duplication between the property names and the operators. Neither of these is more error prone, so it's really just preference at this point. If I were reviewing a PR from you, I wouldn't have an issue if you went with either approach.\n\nPersonally, I think I prefer the type Operator option because I just don't like repeating the types in the functions.\nConclusion\n\nHere's the finished version:\n\ntype OperationFn = (left: number, right: number) => number\n\ntype Operator = '+' | '-' | '/' | '*'\n\nconst operations: Record<Operator, OperationFn> = {\n\n  '+': (left, right) => left + right,\n\n  '-': (left, right) => left - right,\n\n  '*': (left, right) => left * right,\n\n  '/': (left, right) => left / right,\n\n}\n\ntype CalculatorProps = {\n\n  left: number\n\n  operator: keyof typeof operations\n\n  right: number\n\n}\n\nfunction Calculator({left, operator, right}: CalculatorProps) {\n\n  const result = operations[operator](left, right)\n\n  return (\n\n    <div>\n\n      <code>\n\n        {left} {operator} {right} = <output>{result}</output>\n\n      </code>\n\n    </div>\n\n  )\n\n}\n\nconst examples = (\n\n  <>\n\n    <Calculator left={1} operator=\"+\" right={2} />\n\n    <Calculator left={1} operator=\"-\" right={2} />\n\n    <Calculator left={1} operator=\"*\" right={2} />\n\n    <Calculator left={1} operator=\"/\" right={2} />\n\n  </>\n\n)\n\nI hope that gives you an idea of a good way to type your React components. Good luck and take care!",
      "author": "kent c dots",
      "id": 11
    }
  ]
}